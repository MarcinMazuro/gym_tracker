"""
Django settings for gym_tracker project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import sys
import os
from dotenv import load_dotenv
from datetime import timedelta

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_ue-1y##0dfy(*)7mvyp0j=o8tpdemlaa^n_mup+(j%dv43r+='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Set to True for development to see detailed error pages

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Our apps
    'accounts',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'gym_tracker_db',
        'USER': 'gym_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Use SQLite in memory for tests
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }
    # Migrations turned off for tests
    class DisableMigrations:
        def __contains__(self, item):
            return True

        def __getitem__(self, item):
            return None

    MIGRATION_MODULES = DisableMigrations()


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# This tells Django to use CustomUser instead of the default User model
# Must be set before running first migration - cannot be changed easily later
AUTH_USER_MODEL = 'accounts.CustomUser'

# Redirect to user profile after login
LOGIN_REDIRECT_URL = '/'

# Email configuration, not used yet, cause of development phase email are displayed in console
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = os.getenv('EMAIL_PORT', 587)
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)


# Django sites framework
SITE_ID = 1

# Django REST framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
    'rest_framework.throttling.AnonRateThrottle',
    'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',  # not logged in
        'user': '1000/day' # logged in
    }
}

# JWT configuration
# JWT tokens are used for authentication instead of session cookies
SIMPLE_JWT = {
    # Access token expires after 15 minutes (short for security)
    # User needs to refresh token after this time
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    
    # Refresh token expires after 7 days
    # After this, user must log in again
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    
    # When refreshing, issue a new refresh token (more secure)
    'ROTATE_REFRESH_TOKENS': True,
    
    # Blacklist old refresh tokens after rotation (prevents reuse)
    'BLACKLIST_AFTER_ROTATION': True,
    
    # Update last_login field when tokens are refreshed
    'UPDATE_LAST_LOGIN': True,
    
    # Algorithm used to sign the token
    'ALGORITHM': 'HS256',
    
    # Use Django's SECRET_KEY to sign tokens
    'SIGNING_KEY': SECRET_KEY,
    
    # Header type - requests must include: "Authorization: Bearer <token>"
    'AUTH_HEADER_TYPES': ('Bearer',),
    
    # Which field from user model to include in token payload
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# CORS configuration for allowing frontend to access the API
# CORS = Cross-Origin Resource Sharing
# Allows JavaScript from these origins to make requests to our API
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",      # React development server
    "http://127.0.0.1:3000",      # Alternative localhost
    "http://localhost:19006",     # React Native Expo
    "http://localhost:5173"
]

# Allow cookies/auth headers in cross-origin requests
CORS_ALLOW_CREDENTIALS = True

# Authentication backends
# allauth backend allows login with email or username
AUTHENTICATION_BACKENDS = [
    # Needed for superuser login in admin
    'django.contrib.auth.backends.ModelBackend',
    # allauth specific authentication backend for email login
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth configuration
# Email verification - options: 'none', 'optional', 'mandatory'
# 'optional' - emails are sent but users can login without verification
# 'mandatory' - users MUST verify email before login (requires proper frontend handling)
# Emails will be printed to console via EMAIL_BACKEND setting below
ACCOUNT_EMAIL_VERIFICATION = 'optional'

# Email must be unique - one email per account
ACCOUNT_UNIQUE_EMAIL = True

# Defines which fields are required/optional during signup
# Asterisk (*) means required, no asterisk means optional
ACCOUNT_SIGNUP_FIELDS = [
    'email*',      # Email required
    'username*',   # Username required
    'password1*',  # Password required
    'password2*',  # Password confirmation required
]

# Users can log in with either username or email
ACCOUNT_LOGIN_METHODS = {'username', 'email'}

# Minimum password length
ACCOUNT_PASSWORD_MIN_LENGTH = 8

# Don't automatically log in after email confirmation
# User should log in manually after verifying email
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False

# Email confirmation link expires after 3 days
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3

# Mails will be printed to the console in development
# In production, you'll configure real SMTP settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# dj-rest-auth configuration
# Configure dj-rest-auth to use JWT instead of regular tokens
REST_AUTH = {
    # Use JWT for authentication
    'USE_JWT': True,
    
    # Store JWT in cookies
    'JWT_AUTH_COOKIE': 'auth-token',
    'JWT_AUTH_REFRESH_COOKIE': 'refresh-token',
    
    # Set to False for development (allows cookies without HTTPS)
    # Set to True in production with HTTPS
    'JWT_AUTH_SECURE': False,
    
    # HttpOnly cookies (more secure - JavaScript can't access them)
    # Set to True in production
    'JWT_AUTH_HTTPONLY': False,
    
    # Cookies send from same site or other sites but not POST requests
    # Secures against CSRF attacks
    'JWT_AUTH_SAMESITE': 'Lax',
    
    # Custom user details serializer
    'USER_DETAILS_SERIALIZER': 'accounts.serializers.UserSerializer',
    
    # Custom Registration serializer
    'REGISTER_SERIALIZER': 'accounts.serializers.RegisterSerializer',
}

ACCOUNT_ADAPTER = 'accounts.adapters.CustomAccountAdapter'
